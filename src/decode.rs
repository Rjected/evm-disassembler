use crate::types::{Opcode, Operation};
use std::collections::VecDeque;

pub fn decode_operation(bytes: &mut VecDeque<u8>) -> Operation {
    let encoded_opcode = bytes.pop_front().expect("Unexpected end of input");
    let (opcode, num_inputs) = get_opcode_and_num_inputs(encoded_opcode);
    println!("Found opcode: {:?}", opcode);
    let operation = match encoded_opcode {
        0x60..=0x7f => {
            let num_bytes = encoded_opcode - 0x5f;
            Operation::new(opcode).with_bytes(num_bytes as usize, bytes)
        },
        _ => Operation::new(opcode).with_words(num_inputs, bytes),
    };
    println!("Decoded operation: {:#?}", operation);
    operation
}

fn get_opcode_and_num_inputs(opcode: u8) -> (Opcode, u8) {
    match opcode {
        0x00 => (Opcode::STOP, 0),
        0x01 => (Opcode::ADD, 2),
        0x02 => (Opcode::MUL, 2),
        0x03 => (Opcode::SUB, 2),
        0x04 => (Opcode::DIV, 2),
        0x05 => (Opcode::SDIV, 2),
        0x06 => (Opcode::MOD, 2),
        0x07 => (Opcode::SMOD, 2),
        0x08 => (Opcode::ADDMOD, 3),
        0x09 => (Opcode::MULMOD, 3),
        0x0A => (Opcode::EXP, 2),
        0x0B => (Opcode::SIGNEXTEND, 2),
        0x10 => (Opcode::LT, 2),
        0x11 => (Opcode::GT, 2),
        0x12 => (Opcode::SLT, 2),
        0x13 => (Opcode::SGT, 2),
        0x14 => (Opcode::EQ, 2),
        0x15 => (Opcode::ISZERO, 1),
        0x16 => (Opcode::AND, 2),
        0x17 => (Opcode::OR, 2),
        0x18 => (Opcode::XOR, 2),
        0x19 => (Opcode::NOT, 1),
        0x1a => (Opcode::BYTE, 2),
        0x1b => (Opcode::SHL, 2),
        0x1c => (Opcode::SHR, 2),
        0x1d => (Opcode::SAR, 2),
        0x20 => (Opcode::SHA3, 2),
        0x30 => (Opcode::ADDRESS, 0),
        0x31 => (Opcode::BALANCE, 1),
        0x32 => (Opcode::ORIGIN, 0),
        0x33 => (Opcode::CALLER, 0),
        0x34 => (Opcode::CALLVALUE, 0),
        0x35 => (Opcode::CALLDATALOAD, 0),
        0x36 => (Opcode::CALLDATASIZE, 0),
        0x37 => (Opcode::CALLDATACOPY, 3),
        0x38 => (Opcode::CODESIZE, 0),
        0x39 => (Opcode::CODECOPY, 3),
        0x3a => (Opcode::GASPRICE, 0),
        0x3b => (Opcode::EXTCODESIZE, 1),
        0x3c => (Opcode::EXTCODECOPY, 4),
        0x3d => (Opcode::RETURNDATASIZE, 0),
        0x3e => (Opcode::RETURNDATACOPY, 3),
        0x3f => (Opcode::EXTCODEHASH, 1),
        0x40 => (Opcode::BLOCKHASH, 1),
        0x41 => (Opcode::COINBASE, 0),
        0x42 => (Opcode::TIMESTAMP, 0),
        0x43 => (Opcode::NUMBER, 0),
        0x44 => (Opcode::DIFFICULTY, 0),
        0x45 => (Opcode::GASLIMIT, 0),
        0x46 => (Opcode::CHAINID, 0),
        0x47 => (Opcode::SELFBALANCE, 0),
        0x48 => (Opcode::BASEFEE, 0),
        0x50 => (Opcode::POP, 1),
        0x51 => (Opcode::MLOAD, 1),
        0x52 => (Opcode::MSTORE, 2),
        0x53 => (Opcode::MSTORE8, 2),
        0x54 => (Opcode::SLOAD, 1),
        0x55 => (Opcode::SSTORE, 2),
        0x56 => (Opcode::JUMP, 1),
        0x57 => (Opcode::JUMPI, 2),
        0x58 => (Opcode::PC, 0),
        0x59 => (Opcode::MSIZE, 0),
        0x5a => (Opcode::GAS, 0),
        0x5b => (Opcode::JUMPDEST, 0),
        0x60 => (Opcode::PUSH1, 0),
        0x61 => (Opcode::PUSH2, 0),
        0x62 => (Opcode::PUSH3, 0),
        0x63 => (Opcode::PUSH4, 0),
        0x64 => (Opcode::PUSH5, 0),
        0x65 => (Opcode::PUSH6, 0),
        0x66 => (Opcode::PUSH7, 0),
        0x67 => (Opcode::PUSH8, 0),
        0x68 => (Opcode::PUSH9, 0),
        0x69 => (Opcode::PUSH10, 0),
        0x6a => (Opcode::PUSH11, 0),
        0x6b => (Opcode::PUSH12, 0),
        0x6c => (Opcode::PUSH13, 0),
        0x6d => (Opcode::PUSH14, 0),
        0x6e => (Opcode::PUSH15, 0),
        0x6f => (Opcode::PUSH16, 0),
        0x70 => (Opcode::PUSH17, 0),
        0x71 => (Opcode::PUSH18, 0),
        0x72 => (Opcode::PUSH19, 0),
        0x73 => (Opcode::PUSH20, 0),
        0x74 => (Opcode::PUSH21, 0),
        0x75 => (Opcode::PUSH22, 0),
        0x76 => (Opcode::PUSH23, 0),
        0x77 => (Opcode::PUSH24, 0),
        0x78 => (Opcode::PUSH25, 0),
        0x79 => (Opcode::PUSH26, 0),
        0x7a => (Opcode::PUSH27, 0),
        0x7b => (Opcode::PUSH28, 0),
        0x7c => (Opcode::PUSH29, 0),
        0x7d => (Opcode::PUSH30, 0),
        0x7e => (Opcode::PUSH31, 0),
        0x7f => (Opcode::PUSH32, 0),
        0x80 => (Opcode::DUP1, 1),
        0x81 => (Opcode::DUP2, 2),
        0x82 => (Opcode::DUP3, 3),
        0x83 => (Opcode::DUP4, 4),
        0x84 => (Opcode::DUP5, 5),
        0x85 => (Opcode::DUP6, 6),
        0x86 => (Opcode::DUP7, 7),
        0x87 => (Opcode::DUP8, 8),
        0x88 => (Opcode::DUP9, 9),
        0x89 => (Opcode::DUP10, 10),
        0x8a => (Opcode::DUP11, 11),
        0x8b => (Opcode::DUP12, 12),
        0x8c => (Opcode::DUP13, 13),
        0x8d => (Opcode::DUP14, 14),
        0x8e => (Opcode::DUP15, 15),
        0x8f => (Opcode::DUP16, 16),
        0x90 => (Opcode::SWAP1, 2),
        0x91 => (Opcode::SWAP2, 3),
        0x92 => (Opcode::SWAP3, 4),
        0x93 => (Opcode::SWAP4, 5),
        0x94 => (Opcode::SWAP5, 6),
        0x95 => (Opcode::SWAP6, 7),
        0x96 => (Opcode::SWAP7, 8),
        0x97 => (Opcode::SWAP8, 9),
        0x98 => (Opcode::SWAP9, 10),
        0x99 => (Opcode::SWAP10, 11),
        0x9a => (Opcode::SWAP11, 12),
        0x9b => (Opcode::SWAP12, 13),
        0x9c => (Opcode::SWAP13, 14),
        0x9d => (Opcode::SWAP14, 15),
        0x9e => (Opcode::SWAP15, 16),
        0x9f => (Opcode::SWAP16, 17),
        0xa0 => (Opcode::LOG0, 2),
        0xa1 => (Opcode::LOG1, 3),
        0xa2 => (Opcode::LOG2, 4),
        0xa3 => (Opcode::LOG3, 5),
        0xa4 => (Opcode::LOG4, 6),
        0xf0 => (Opcode::CREATE, 3),
        0xf1 => (Opcode::CALL, 7),
        0xf2 => (Opcode::CALLCODE, 7),
        0xf3 => (Opcode::RETURN, 2),
        0xf4 => (Opcode::DELEGATECALL, 7),
        0xf5 => (Opcode::CREATE2, 4),
        0xf6 => (Opcode::STATICCALL, 7),
        0xf7 => (Opcode::REVERT, 2),
        0xfe => (Opcode::INVALID, 0),
        0xff => (Opcode::SELFDESTRUCT, 0),
        _ => panic!("Invalid opcode: {}", opcode.to_string()),
    }
}
